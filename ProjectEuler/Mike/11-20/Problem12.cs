using System;
using System.Linq;

namespace ProjectEuler._11_20
{
	/// <summary>
	/// The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
	/// 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
	/// Let us list the factors of the first seven triangle numbers:
	/// 1: 1
	/// 3: 1,3
	/// 6: 1,2,3,6
	/// 10: 1,2,5,10
	/// 15: 1,3,5,15
	/// 21: 1,3,7,21
	/// 28: 1,2,4,7,14,28
	///We can see that 28 is the first triangle number to have over five divisors.
	///What is the value of the first triangle number to have over five hundred divisors?
	/// </summary>
	public static class Problem12
	{
		public static void Run()
		{
			const int numberOfFactors = 500;

			var first = GetTrianglesWithFactors(numberOfFactors);

			Console.WriteLine(first);
		}

		private static int GetTrianglesWithFactors(int threshold)
		{
			int number = 0;

			while (number < int.MaxValue)
			{
				number++;
				var triangle = GetTriangle(number);
				int numberOfDivisors = GetNumberOfDivisors(triangle);

				if (numberOfDivisors > threshold)
				{
					return triangle;
				}
			}

			return 1;
		}

		private static int GetTriangle(int n)
		{
			return Enumerable.Range(1, n)
				.Sum();
		}

		private static int GetNumberOfDivisors(int number)
		{
			var maxValue = (int)Math.Floor(Math.Sqrt(number));
			int factorCount = 0;

			for (int i = maxValue; i > 0; i--)
			{
				if (number % i == 0)
				{
					factorCount++;
				}
			}

			return factorCount * 2;
		}
	}
}
